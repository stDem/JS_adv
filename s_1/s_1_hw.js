// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const musicCollection = [
  { title: "Название альбома", artist: "Исполнитель", year: "Год выпуска" },
  {
    title: "Название альбома(1)",
    artist: "Исполнитель(1)",
    year: "Год выпуска(1)",
  },
  {
    title: "Название альбома(2)",
    artist: "Исполнитель(2)",
    year: "Год выпуска(2)",
  },
];
musicCollection[Symbol.iterator] = function () {
  return {
    current: 0,
    to: this.length,
    next() {
      return this.current < this.to
        ? { done: false, value: musicCollection[this.current++] }
        : { done: true };
    },
  };
};
for (let music of musicCollection) {
  console.log(
    `Название альбома: ${music.title}, Исполнитель: ${music.artist}, Год выпуска: ${music.year}`
  );
}
// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

const cook = new Map();
cook.set("Пицца 'Маргарита'", "Виктор");
cook.set("Пицца 'Пепперони'", "Виктор");
cook.set("Суши 'Филадельфия'", "Ольга");
cook.set("Суши 'Калифорния'", "Ольга");
cook.set("Тирамису", "Дмитрий");
cook.set("Чизкейк", "Дмитрий");

const AlexOrders = new Set().add("Пицца 'Пепперони'").add("Тирамису");

const MariOrders = new Set().add("Суши 'Калифорния'").add("Пицца 'Маргарита'");

const IrinaOrders = new Set().add("Чизкейк");

const client = new Map();
client.set("Alex", AlexOrders);
client.set("Mari", MariOrders);
client.set("Irina", IrinaOrders);
console.log(
  `Клиент Алексей заказал: ${[
    ...client.get("Alex"),
  ]}. Его заказ готовят повара: ${[...cook.get("Пицца 'Пепперони'")]} и ${[
    ...cook.get("Тирамису"),
  ]}`
);
console.log(
  `Клиент Мария заказал: ${[
    ...client.get("Mari"),
  ]}. Его заказ готовят повара: ${[...cook.get("Суши 'Калифорния'")]} и ${[
    ...cook.get("Пицца 'Маргарита'"),
  ]}`
);
console.log(
  `Клиент Мария заказал: ${[
    ...client.get("Irina"),
  ]}. Его заказ готовят повара: ${[...cook.get("Чизкейк")]}`
);
